# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BridgeTransfer {
  id: String!
  status: String!
}

input BridgeTransferOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
}

enum BridgeTransferScalarFieldEnum {
  id
  status
}

input BridgeTransferWhereInput {
  AND: [BridgeTransferWhereInput!]
  NOT: [BridgeTransferWhereInput!]
  OR: [BridgeTransferWhereInput!]
  id: StringFilter
  status: StringFilter
}

input BridgeTransferWhereUniqueInput {
  id: String
}

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Meta {
  blockNumber: Int!
  id: Int!
}

input MetaOrderByWithRelationInput {
  blockNumber: SortOrder
  id: SortOrder
}

enum MetaScalarFieldEnum {
  blockNumber
  id
}

input MetaWhereInput {
  AND: [MetaWhereInput!]
  NOT: [MetaWhereInput!]
  OR: [MetaWhereInput!]
  blockNumber: IntFilter
  id: IntFilter
}

input MetaWhereUniqueInput {
  id: Int
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Proof {
  amount: Decimal!
  blockNumber: Int!
  dest: Int!
  destCaller: String!
  destToken: String!
  destType: Int!
  id: String!
  nonce: Int
  src: Int!
  srcCaller: String!
  srcToken: String!
  srcType: Int!
  timestamp: Int!
  txHash: String!
  type: String!
}

input ProofOrderByWithRelationInput {
  amount: SortOrder
  blockNumber: SortOrder
  dest: SortOrder
  destCaller: SortOrder
  destToken: SortOrder
  destType: SortOrder
  id: SortOrder
  nonce: SortOrder
  src: SortOrder
  srcCaller: SortOrder
  srcToken: SortOrder
  srcType: SortOrder
  timestamp: SortOrder
  txHash: SortOrder
  type: SortOrder
}

enum ProofScalarFieldEnum {
  amount
  blockNumber
  dest
  destCaller
  destToken
  destType
  id
  nonce
  src
  srcCaller
  srcToken
  srcType
  timestamp
  txHash
  type
}

input ProofWhereInput {
  AND: [ProofWhereInput!]
  NOT: [ProofWhereInput!]
  OR: [ProofWhereInput!]
  amount: DecimalFilter
  blockNumber: IntFilter
  dest: IntFilter
  destCaller: StringFilter
  destToken: StringFilter
  destType: IntFilter
  id: StringFilter
  nonce: IntNullableFilter
  src: IntFilter
  srcCaller: StringFilter
  srcToken: StringFilter
  srcType: IntFilter
  timestamp: IntFilter
  txHash: StringFilter
  type: StringFilter
}

input ProofWhereUniqueInput {
  id: String
}

type Query {
  bridgeTransfer(where: BridgeTransferWhereUniqueInput!): BridgeTransfer
  bridgeTransfers(cursor: BridgeTransferWhereUniqueInput, distinct: [BridgeTransferScalarFieldEnum!], orderBy: [BridgeTransferOrderByWithRelationInput!], skip: Int, take: Int, where: BridgeTransferWhereInput): [BridgeTransfer!]!
  findFirstMeta(cursor: MetaWhereUniqueInput, distinct: [MetaScalarFieldEnum!], orderBy: [MetaOrderByWithRelationInput!], skip: Int, take: Int, where: MetaWhereInput): Meta
  proof(where: ProofWhereUniqueInput!): Proof
  proofs(cursor: ProofWhereUniqueInput, distinct: [ProofScalarFieldEnum!], orderBy: [ProofOrderByWithRelationInput!], skip: Int, take: Int, where: ProofWhereInput): [Proof!]!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
